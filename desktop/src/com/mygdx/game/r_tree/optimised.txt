public int chooseSplitIndexOptimised(Rectangle[] rectangles){
                int index = 0;
                int minimumOverlap = Integer.MAX_VALUE;
                int minimumArea = Integer.MAX_VALUE;
                int largestGroup1Size = (max - 2 * min + 2) - 1;
                int largestGroup2Size = rectangles.length - (min - 1 + 1);
                Rectangle[] group1 = new Rectangle[largestGroup1Size];
                Rectangle[] group2 = new Rectangle[largestGroup2Size];
                System.arraycopy(rectangles, 0, group1, 0, min - 1 + 1);
                System.arraycopy(rectangles, 0, group2, 0, rectangles.length - (min - 1 + 1));
                int insertIndex = min - 1 + 2;
                Rectangle r1 = Rectangle.createMinimumBounding(group1);
                Rectangle r2 = Rectangle.createMinimumBounding(group2);
                // for(int k = 1; k < (max - 2 * min + 2); k++)
                // int firstGroupAmount = min - 1 + k;
                for(int k = 1; k < (max - 2 * min + 2); k++) {
                    group1[insertIndex + k] = rectangles[insertIndex + k];
                    group2[k] = null;
                    r1 = Rectangle.createMinimumBoundingRectangle(r1, rectangles[insertIndex + k]);
                    r2 = Rectangle.createMinimumBounding(group2);
                    int overlap = r1.overlapWith(r2);
                    int area = r1.area() + r2.area();
                    if(overlap < minimumOverlap || overlap == minimumOverlap && area < minimumArea){
                        index = (min - 1 + k);
                        minimumOverlap = overlap;
                        minimumArea = area;
                    }
                }
                return index;
            }